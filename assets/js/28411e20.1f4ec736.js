(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{184:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=o.a.createContext({}),s=function(e){var t=o.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return o.a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),b=s(n),u=a,h=b["".concat(r,".").concat(u)]||b[u]||p[u]||i;return n?o.a.createElement(h,c(c({ref:t},d),{},{components:n})):o.a.createElement(h,c({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var d=2;d<i;d++)r[d]=n[d];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},185:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return r}));var a=n(10),o=n(186);function i(){var e=Object(a.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var i=void 0===a?{}:a,r=i.forcePrependBaseUrl,c=void 0!==r&&r,l=i.absolute,d=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if(Object(o.b)(n))return n;if(c)return t+n;var s=n.startsWith(t)?n:t+n.replace(/^\//,"");return d?e+s:s}(i,n,e,t)}}}function r(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},186:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return o}))},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return b}));var a=n(3),o=n(8),i=(n(0),n(184)),r=n(185),c={id:"onattached-ondetached",title:"OnAttached/OnDetached"},l={unversionedId:"onattached-ondetached",id:"onattached-ondetached",isDocsHomePage:!1,title:"OnAttached/OnDetached",description:"Sometimes we would like the component to subscribe a listener when it's available and unsubscribe the listener when the component is unavailable. Usually we can use VisibleEvent and InvisibleEvent handlers to subscribe/unsubscribe listeners.",source:"@site/../docs/onattached-ondetached.mdx",slug:"/onattached-ondetached",permalink:"/docs/onattached-ondetached",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/onattached-ondetached.mdx",version:"current"},d=[{value:"Introduce OnAttached/OnDetached lifecycle methods",id:"introduce-onattachedondetached-lifecycle-methods",children:[]},{value:"When is @OnAttached method called?",id:"when-is-onattached-method-called",children:[]},{value:"When is @OnDetached method called?",id:"when-is-ondetached-method-called",children:[]},{value:"Sample app",id:"sample-app",children:[]}],s={toc:d};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Sometimes we would like the component to subscribe a listener when it's available and unsubscribe the listener when the component is unavailable. Usually we can use ",Object(i.b)("inlineCode",{parentName:"p"},"VisibleEvent")," and ",Object(i.b)("inlineCode",{parentName:"p"},"InvisibleEvent")," handlers to subscribe/unsubscribe listeners."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"@OnEvent(VisibleEvent.class)\nstatic void onVisible(\n    ComponentContext c, @Prop DataSource dataSource, @State SomeListener listener) {\n  dataSource.subscribe(listener);\n}\n\n@OnEvent(InvisibleEvent.class)\nstatic void onInvisible(\n    ComponentContext c, @Prop DataSource dataSource, @State SomeListener listener) {\n  dataSource.unsubscribe(listener);\n}\n")),Object(i.b)("p",null,"However, there're a few drawbacks with this approach:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"VisibleEvent")," handler might not be called because the component isn't visible in the viewport, or might be called multiple times without changing the component. Similar issue with ",Object(i.b)("inlineCode",{parentName:"li"},"InvisibleEvent")," handler. It's hard to use these event handlers to manage listeners/resources."),Object(i.b)("li",{parentName:"ul"},"There's no guarantee that ",Object(i.b)("inlineCode",{parentName:"li"},"VisibleEvent"),"/",Object(i.b)("inlineCode",{parentName:"li"},"InvisibleEvent")," handlers are executed in order.")),Object(i.b)("p",null,"Method annotated with ",Object(i.b)("inlineCode",{parentName:"p"},"@OnAttached")," is called when the component is attached to the ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentTree"),", and method annotated with ",Object(i.b)("inlineCode",{parentName:"p"},"@OnDetached")," is called when either it's removed from the ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentTree")," or the ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentTree")," is released. For each component, both the methods are guaranteed to be called at most once."),Object(i.b)("h2",{id:"introduce-onattachedondetached-lifecycle-methods"},"Introduce OnAttached/OnDetached lifecycle methods"),Object(i.b)("p",null,"By introducing these two methods, now we can subscribe the listener in ",Object(i.b)("inlineCode",{parentName:"p"},"@OnAttached")," method and unsubscribe it in ",Object(i.b)("inlineCode",{parentName:"p"},"@OnDetached")," method."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"@OnAttached\nprotected void onAttached(\n    ComponentContext c, @Prop DataSource dataSource, @State SomeListener listener) {\n  dataSource.subscribe(listener);\n}\n\n@OnDetached\nprotected void onDetached(\n    ComponentContext c, @Prop DataSource dataSource, @State SomeListener listener) {\n  dataSource.unsubscribe(listener);\n}\n")),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:Object(r.a)("/images/layout-spec-delegate-moethods.svg"),alt:"Image",width:"70%",height:"70%",className:"white-background"})),Object(i.b)("h2",{id:"when-is-onattached-method-called"},"When is @OnAttached method called?"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@OnAttached")," is called when ",Object(i.b)("inlineCode",{parentName:"p"},"LayoutState")," is finalized and applied to the ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentTree"),". For each component in each ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentTree"),", ",Object(i.b)("inlineCode",{parentName:"p"},"@OnAttached")," is guaranteed to be called only once."),Object(i.b)("h2",{id:"when-is-ondetached-method-called"},"When is @OnDetached method called?"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"@OnDetached")," is called either when"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"LithoView#release()")," or ",Object(i.b)("inlineCode",{parentName:"li"},"ComponentTree#release()")," is called. Usually you would need to release ",Object(i.b)("inlineCode",{parentName:"li"},"LithoView")," or ",Object(i.b)("inlineCode",{parentName:"li"},"ComponentTree")," manually in Activity/Fragment ",Object(i.b)("inlineCode",{parentName:"li"},"onDestroy()")," to trigger ",Object(i.b)("inlineCode",{parentName:"li"},"@OnDetached")," method."),Object(i.b)("li",{parentName:"ul"},"A new root is assigned to ",Object(i.b)("inlineCode",{parentName:"li"},"ComponentTree"),", i.e ",Object(i.b)("inlineCode",{parentName:"li"},"LithoView#setComponent()"),", ",Object(i.b)("inlineCode",{parentName:"li"},"ComponentTree#setRoot()")," or one of their async variants is called, and the old component doesn't exist in the root. For example:")),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:Object(r.a)("/images/set-new-root.png"),alt:"Image",width:"60%",height:"60%"})),Object(i.b)("p",null,"When a new root is applied, ",Object(i.b)("inlineCode",{parentName:"p"},"@OnDetached")," methods for components ",Object(i.b)("inlineCode",{parentName:"p"},"C"),", ",Object(i.b)("inlineCode",{parentName:"p"},"D"),", ",Object(i.b)("inlineCode",{parentName:"p"},"E")," are called. You can see that even if component ",Object(i.b)("inlineCode",{parentName:"p"},"E")," still exists in the new root, its ",Object(i.b)("inlineCode",{parentName:"p"},"@OnDetached")," is called as well, because its position has changed."),Object(i.b)("h2",{id:"sample-app"},"Sample app"),Object(i.b)("p",null,"Check out ",Object(i.b)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/master/sample/src/main/java/com/facebook/samples/litho/lifecycle/LifecycleDelegateActivity.java"},"Component Lifecycle Example")," in our sample app to understand the component lifecycle methods better!"))}b.isMDXComponent=!0}}]);