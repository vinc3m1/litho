(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var i=n(3),a=n(8),c=(n(0),n(184)),o={id:"accessibility-overview",title:"Overview"},r={unversionedId:"accessibility/accessibility-overview",id:"accessibility/accessibility-overview",isDocsHomePage:!1,title:"Overview",description:"This page was moved from the old website without any change and might be updated",source:"@site/../docs/accessibility/accessibility-overview.md",slug:"/accessibility/accessibility-overview",permalink:"/docs/accessibility/accessibility-overview",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/accessibility/accessibility-overview.md",version:"current",sidebar:"mainSidebar",previous:{title:"Advanced: Transitions key scoping",permalink:"/docs/animations/transition-key-types"},next:{title:"Analysing Performance",permalink:"/docs/performance/analysing-performance"}},l=[{value:"Content Description",id:"content-description",children:[]},{value:"Custom accessibility",id:"custom-accessibility",children:[]},{value:"Extra accessibility nodes",id:"extra-accessibility-nodes",children:[]},{value:"Accessibility Handling",id:"accessibility-handling",children:[]},{value:"Accessibility Heading",id:"accessibility-heading",children:[]}],s={toc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Content will be updated")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"This page was moved from the old website without any change and might be updated"))),Object(c.b)("h2",{id:"content-description"},"Content Description"),Object(c.b)("p",null,"All components support content description by default. This means all layout builders have a prop of type ",Object(c.b)("inlineCode",{parentName:"p"},"CharSequence")," named ",Object(c.b)("inlineCode",{parentName:"p"},"contentDescription")," ."),Object(c.b)("p",null,"Setting a content description on any component is as simple as:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},'Image.create(c)\n    .imageRes(R.drawable.some_image)\n    .contentDescription("This is an image")\n    .build())\n')),Object(c.b)("p",null,"The content description set here has the same semantics as when it is set on an Android view."),Object(c.b)("h2",{id:"custom-accessibility"},"Custom accessibility"),Object(c.b)("p",null,"Mount Specs can implement their own accessibility support by implementing an ",Object(c.b)("inlineCode",{parentName:"p"},"@OnPopulateAccessibilityNode")," method. This method accepts an ",Object(c.b)("inlineCode",{parentName:"p"},"AccessibilityNodeInfoCompat")," argument as well as any props that are specified on the spec method."),Object(c.b)("p",null,"For example, accessibility for ",Object(c.b)("inlineCode",{parentName:"p"},"Text")," is specified using the following method:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},"@OnPopulateAccessibilityNode\nstatic void onPopulateAccessibilityNode(\n    AccessibilityNodeInfoCompat accessibilityNode,\n    @Prop CharSequence text) {\n  accessibilityNode.setText(text);\n}\n")),Object(c.b)("p",null,"This is only applicable for components which mount drawables, since if the component mounts a view, the support is built-in."),Object(c.b)("h2",{id:"extra-accessibility-nodes"},"Extra accessibility nodes"),Object(c.b)("p",null,"On more complex mount specs that need to expose extra nodes to the accessibility framework, you'll have to implement three extra methods with the following annotations:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"GetExtraAccessibilityNodesCount"),": Returns number of extra accessibility nodes exposed by the component."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"OnPopulateExtraAccessibilityNode"),": Populates the extra accessibility node with the given bounds.")),Object(c.b)("h2",{id:"accessibility-handling"},"Accessibility Handling"),Object(c.b)("p",null,"All components support a set of events corresponding to ",Object(c.b)("a",{parentName:"p",href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html"},Object(c.b)("inlineCode",{parentName:"a"},"AccessibilityDelegateCompat")),"'s methods.\nThese events have attributes for each parameter of the corresponding ",Object(c.b)("inlineCode",{parentName:"p"},"AccessibilityDelegateCompat")," method ",Object(c.b)("em",{parentName:"p"},"and")," an additional parameter of type ",Object(c.b)("inlineCode",{parentName:"p"},"AccessibilityDelegateCompat")," called ",Object(c.b)("inlineCode",{parentName:"p"},"superDelegate"),", which allows you to explicitly call ",Object(c.b)("inlineCode",{parentName:"p"},"View"),"'s default implementation of accessibility methods where necessary."),Object(c.b)("p",null,"Here is an overview of the supported events:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"Event"),Object(c.b)("th",{parentName:"tr",align:null},"AccessibilityDelegate method"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"DispatchPopulateAccessibilityEventEvent"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#dispatchPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)"},"dispatchPopulateAccessibilityEvent"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"OnInitializeAccessibilityEventEvent"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)"},"onInitializeAccessibilityEvent"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"OnInitializeAccessibilityNodeInfoEvent"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onInitializeAccessibilityNodeInfo(android.view.View, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)"},"onInitializeAccessibilityNodeInfo"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"OnPopulateAccessibilityEventEvent"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)"},"onPopulateAccessibilityEvent"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"OnRequestSendAccessibilityEventEvent"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onRequestSendAccessibilityEvent(android.view.ViewGroup, android.view.View, android.view.accessibility.AccessibilityEvent)"},"onRequestSendAccessibilityEvent"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"PerformAccessibilityActionEvent"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#performAccessibilityAction(android.view.View, int, android.os.Bundle)"},"performAccessibilityAction"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"SendAccessibilityEventEvent"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#sendAccessibilityEvent(android.view.View, int)"},"sendAccessibilityEvent"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"SendAccessibilityUncheckedEvent"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("a",{href:"https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#sendAccessibilityEventUnchecked(android.view.View, android.view.accessibility.AccessibilityEvent)"},"sendAccessibilityEventUnchecked"))))),Object(c.b)("p",null,"Setting a handler for any of these events will result in an ",Object(c.b)("inlineCode",{parentName:"p"},"AccessibilityDelegate")," being set on the mounted ",Object(c.b)("inlineCode",{parentName:"p"},"View"),", which will call your event handler when the corresponding method is called."),Object(c.b)("p",null,"Whenever a method for which you haven't supplied an event handler is called, the delegate will defer to the Android ",Object(c.b)("inlineCode",{parentName:"p"},"View"),"'s default implementation (equivalent to calling ",Object(c.b)("inlineCode",{parentName:"p"},"super")," or ",Object(c.b)("inlineCode",{parentName:"p"},"superDelegate"),"'s implementation)."),Object(c.b)("p",null,"For example, here are the steps for overriding ",Object(c.b)("inlineCode",{parentName:"p"},"onInitializeAccessibilityNodeInfo")," for a component:"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"Implementing an event handler")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},"@OnEvent(OnInitializeAccessibilityNodeInfoEvent.class)\nstatic void onInitializeAccessibilityNodeInfoEvent(\n    ComponentContext c,\n    @FromEvent AccessibilityDelegateCompat superDelegate,\n    @FromEvent View host,\n    @FromEvent AccessibilityNodeInfoCompat info) {\n  // Equivalent to calling super on a regular AccessibilityDelegate, not required\n  superDelegate.onInitializeAccessibilityNodeInfo(view, info);\n  // My implementation\n}\n")),Object(c.b)("ol",{start:2},Object(c.b)("li",{parentName:"ol"},"Setting that event handler on a component:")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},"Text.create(c)\n    .text(title)\n    .onInitializeAccessiblityNodeInfoHandler(MyComponent.onInitializeAccessibilityNodeInfoEvent(c))\n")),Object(c.b)("p",null,"One of the best features of ",Object(c.b)("inlineCode",{parentName:"p"},"AccessibilityDelegate"),"s in general is their reusability even across different types of ",Object(c.b)("inlineCode",{parentName:"p"},"View"),'s. This can also be achieved within Litho by creating a wrapper spec that takes in a component and adds the desired event handlers. For example, let\'s say we want to have a Component that appends "please" to every ',Object(c.b)("inlineCode",{parentName:"p"},"AccessibilityEvent")," that it announces."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},'@LayoutSpec\nclass PoliteComponentWrapper {\n\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c,\n      @Prop Component content) {\n\n    return Wrapper.create(c)\n        .delegate(content)\n        .onPopulateAccessibilityEventHandler(\n            PoliteComponentWrapper.onPopulateAccessibilityEvent(c))\n        .build();\n  }\n\n  @OnEvent(OnPopulateAccessibilityEvent.class)\n  static void onPopulateAccessibilityEvent(\n      ComponentContext c,\n      @FromEvent AccessibilityDelegateCompat superDelegate,\n      @FromEvent View view\n      @FromEvent AccessibilityEvent event) {\n    superDelegate.onPopulateAccessibilityEvent(view, event);\n    event.getText().add("please");\n  }\n}\n')),Object(c.b)("p",null,"Now you can replace any usages of your component with ",Object(c.b)("inlineCode",{parentName:"p"},"PoliteComponentWrapper")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},"@OnCreateLayout\nstatic Component onCreateLayout(\n    ComponentContext c,\n    @Prop CharSequence text) {\n\n  return PoliteComponentWrapper.create(c)\n      .content(\n           Text.create(c)\n               .text(text))\n      .build();\n}\n")),Object(c.b)("h2",{id:"accessibility-heading"},"Accessibility Heading"),Object(c.b)("p",null,'Heading is an accessibility property and will help the users to choose to "Navigate by Headings" and ignore scrolling through each and every subitem under a heading. "Navigate based on Heading" can be selected from "Local Context Menu" when talkback is on. Talkback gesture for "Local Context Menu" is ',Object(c.b)("strong",{parentName:"p"},"Swipe up then right"),".\nMaking any component an Accessibility Header is as simple as:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-java"},'Row.create(c)\n    .contentDescription("This is an accessibility heading")\n    .accessibilityHeading(true)\n    .build()\n')))}b.isMDXComponent=!0},184:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var i=n(0),a=n.n(i);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},c=Object.keys(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,c=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),m=i,u=p["".concat(o,".").concat(m)]||p[m]||d[m]||c;return n?a.a.createElement(u,r(r({ref:t},s),{},{components:n})):a.a.createElement(u,r({ref:t},s))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=n.length,o=new Array(c);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var s=2;s<c;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);