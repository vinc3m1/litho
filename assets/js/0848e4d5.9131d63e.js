(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{184:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,m=u["".concat(s,".").concat(d)]||u[d]||b[d]||a;return n?r.a.createElement(m,i(i({ref:t},c),{},{components:n})):r.a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},189:function(e,t,n){"use strict";var o=n(0),r=n(190);t.a=function(){var e=Object(o.useContext)(r.a);if(null==e)throw new Error("`useThemeContext` is used outside of `Layout` Component. See https://v2.docusaurus.io/docs/api/themes/configuration#usethemecontext.");return e}},190:function(e,t,n){"use strict";var o=n(0),r=n.n(o).a.createContext(void 0);t.a=r},192:function(e,t,n){"use strict";n.d(t,"b",(function(){return s}));var o=n(23),r={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","at-rule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]},a=n(0),s={Prism:o.a,theme:r};function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var c=/\r\n|\r|\n/,p=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},u=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},b=function(e,t){var n=e.plain,o=Object.create(null),r=e.styles.reduce((function(e,n){var o=n.languages,r=n.style;return o&&!o.includes(t)||n.types.forEach((function(t){var n=l({},e[t],r);e[t]=n})),e}),o);return r.root=n,r.plain=l({},n,{backgroundColor:null}),r};function d(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===t.indexOf(o)&&(n[o]=e[o]);return n}var m=function(e){function t(){for(var t=this,n=[],o=arguments.length;o--;)n[o]=arguments[o];e.apply(this,n),i(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?b(e.theme,e.language):void 0;return t.themeDict=n})),i(this,"getLineProps",(function(e){var n=e.key,o=e.className,r=e.style,a=l({},d(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),s=t.getThemeDict(t.props);return void 0!==s&&(a.style=s.plain),void 0!==r&&(a.style=void 0!==a.style?l({},a.style,r):r),void 0!==n&&(a.key=n),o&&(a.className+=" "+o),a})),i(this,"getStyleForToken",(function(e){var n=e.types,o=e.empty,r=n.length,a=t.getThemeDict(t.props);if(void 0!==a){if(1===r&&"plain"===n[0])return o?{display:"inline-block"}:void 0;if(1===r&&!o)return a[n[0]];var s=o?{display:"inline-block"}:{},i=n.map((function(e){return a[e]}));return Object.assign.apply(Object,[s].concat(i))}})),i(this,"getTokenProps",(function(e){var n=e.key,o=e.className,r=e.style,a=e.token,s=l({},d(e,["key","className","style","token"]),{className:"token "+a.types.join(" "),children:a.content,style:t.getStyleForToken(a),key:void 0});return void 0!==r&&(s.style=void 0!==s.style?l({},s.style,r):r),void 0!==n&&(s.key=n),o&&(s.className+=" "+o),s})),i(this,"tokenize",(function(e,t,n,o){var r={code:t,grammar:n,language:o,tokens:[]};e.hooks.run("before-tokenize",r);var a=r.tokens=e.tokenize(r.code,r.grammar,r.language);return e.hooks.run("after-tokenize",r),a}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,o=e.code,r=e.children,a=this.getThemeDict(this.props),s=t.languages[n];return r({tokens:function(e){for(var t=[[]],n=[e],o=[0],r=[e.length],a=0,s=0,i=[],l=[i];s>-1;){for(;(a=o[s]++)<r[s];){var b=void 0,d=t[s],m=n[s][a];if("string"==typeof m?(d=s>0?d:["plain"],b=m):(d=u(d,m.type),m.alias&&(d=u(d,m.alias)),b=m.content),"string"==typeof b){var h=b.split(c),g=h.length;i.push({types:d,content:h[0]});for(var y=1;y<g;y++)p(i),l.push(i=[]),i.push({types:d,content:h[y]})}else s++,t.push(d),n.push(b),o.push(0),r.push(b.length)}s--,t.pop(),n.pop(),o.pop(),r.pop()}return p(i),l}(void 0!==s?this.tokenize(t,o,s,n):[o]),className:"prism-code language-"+n,style:void 0!==a?a.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(a.Component);t.a=m},193:function(e,t,n){"use strict";var o=n(3),r=n(0),a=n.n(r),s=n(192),i={plain:{color:"rgb(36, 41, 46)",backgroundColor:"#f6f8fa"},styles:[{types:["prolog"],style:{color:"rgb(0, 0, 128)"}},{types:["comment"],style:{color:"rgb(106, 153, 85)"}},{types:["builtin","changed","keyword"],style:{color:"rgb(215, 58, 73)",color:"#e3116c"}},{types:["inserted-sign","inserted"],style:{backgroundColor:"rgb(240, 255, 244)",color:"rgb(34, 134, 58)"}},{types:["constant"],style:{color:"rgb(100, 102, 149)"}},{types:["attr-name","variable"],style:{color:"rgb(156, 220, 254)"}},{types:["deleted-sign","deleted"],style:{backgroundColor:"rgb(255, 238, 240)",color:"rgb(179, 29, 40)"}},{types:["selector"],style:{color:"rgb(215, 186, 125)"}},{types:["tag"],style:{color:"rgb(78, 201, 176)"}},{types:["tag"],languages:["markup"],style:{color:"rgb(86, 156, 214)"}},{types:["punctuation","operator"],style:{color:"rgb(36, 41, 46)"}},{types:["operator"],style:{color:"rgb(0, 92, 197)"}},{types:["boolean"],style:{color:"rgb(0, 92, 197)"}},{types:["punctuation"],languages:["markup"],style:{color:"#808080"}},{types:["function"],style:{color:"rgb(111, 66, 193)"}},{types:["class-name"],style:{color:"rgb(78, 201, 176)"}},{types:["known-class-name","class-name"],style:{color:"rgb(227, 98, 9)"}},{types:["char"],style:{color:"rgb(209, 105, 105)"}},{types:["property-access"],style:{color:"rgb(0, 92, 197)"}},{types:["method","function","property-access"],style:{color:"rgb(111, 66, 193)"}},{languages:["json"],types:["property"],style:{color:"rgb(3, 47, 98)"}},{languages:["json"],types:["string"],style:{color:"rgb(3, 47, 98)"}},{languages:["json"],types:["number"],style:{color:"rgb(0, 92, 197)"}},{languages:["json"],types:["comment"],style:{backgroundColor:"rgb(179, 29, 40)",color:"rgb(250, 251, 252)"}}]},l={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]},c="0.40.0",p="0.40.1-SNAPSHOT",u="0.9.0",b="0.46.0",d=n(189);t.a=function(e){var t=e.language,n=e.code.replace(/{{site.lithoVersion}}/g,c).replace(/{{site.soloaderVersion}}/g,u).replace(/{{site.lithoSnapshotVersion}}/g,p).replace(/{{site.flipperVersion}}/g,b).trim(),r=Object(d.a)().isDarkTheme?l:i;return a.a.createElement(s.a,Object(o.a)({},s.b,{code:n,language:t,theme:r}),(function(e){var t=e.className,n=e.style,o=e.tokens,r=e.getLineProps,s=e.getTokenProps;return a.a.createElement("pre",{className:t,style:n},o.map((function(e,t){return a.a.createElement("div",r({line:e,key:t}),e.map((function(e,t){return a.a.createElement("span",s({token:e,key:t}))})))})))}))}},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var o=n(3),r=n(8),a=(n(0),n(184)),s=n(193),i={id:"unit-testing",title:"Getting Started"},l={unversionedId:"testing/unit-testing",id:"testing/unit-testing",isDocsHomePage:!1,title:"Getting Started",description:"In order to use any of the testing utilities please include the litho-testing package in the",source:"@site/../docs/testing/unit-testing.mdx",slug:"/testing/unit-testing",permalink:"/docs/testing/unit-testing",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/testing/unit-testing.mdx",version:"current",sidebar:"mainSidebar",previous:{title:"Introduction",permalink:"/docs/testing/testing-overview"},next:{title:"Sub-Component Testing",permalink:"/docs/testing/subcomponent-testing"}},c=[{value:"Example",id:"example",children:[]},{value:"Setup",id:"setup",children:[]},{value:"Testing component rendering",id:"testing-component-rendering",children:[]},{value:"Additional assertions",id:"additional-assertions",children:[]}],p={toc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In order to use any of the testing utilities please include the ",Object(a.b)("inlineCode",{parentName:"p"},"litho-testing")," package in the\nbuild. Add the following lines to the ",Object(a.b)("inlineCode",{parentName:"p"},"dependencies")," block in the ",Object(a.b)("inlineCode",{parentName:"p"},"build.gradle")," file:"),Object(a.b)(s.a,{language:"groovy",code:"\ntestImplementation 'com.facebook.litho:litho-testing:{{site.lithoVersion}}'\n",mdxType:"VersionedCodeBlock"}),Object(a.b)("p",null,"Litho's testing APIs are exposed through fluid AssertJ methods. They are available as:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"pathname:///javadoc/com/facebook/litho/testing/assertj/ComponentAssert.html"},"ComponentAssert"),"\nfor assertions that are run against either Component builders or Components."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"pathname:///javadoc/com/facebook/litho/testing/assertj/LithoViewAssert.html"},"LithoViewAssert"),"\nfor assertions against mounted UI hierarchies.")),Object(a.b)("p",null,"For convenience, ",Object(a.b)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/testing/assertj/LithoAssertions.html"},"LithoAssertions.assertThat"),"\ncan be statically imported. It hosts all the APIs of ",Object(a.b)("inlineCode",{parentName:"p"},"ComponentAssert"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"LithoViewAssert"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"import static com.facebook.litho.testing.assertj.LithoAssertions.assertThat;\n")),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("p",null,"To demonstrate the usage of these APIs consider the following component that displays a like icon and\na short description."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"/**\n * Displays who liked the post.\n *\n * 1 - 3 likers => Comma separated names (e.g. Jane, Mike, Doug)\n * > 3 likers => Comma separated number denoting the like count\n */\n@LayoutSpec\nclass LikersComponentSpec {\n\n  @OnCreateLayout\n  protected static Component onCreateLayout(\n      ComponentContext c,\n      @Prop List<User> likers) {\n\n    return Row.create(c)\n        .alignItems(FLEX_START)\n        .child(\n          Image.create(c)\n            .drawableRes(R.drawable.like))\n        .child(\n          Text.create(c)\n            .text(formatLikers(likers))\n            .textSizeSp(12)\n            .ellipsize(TruncateAt.END))\n        .build();\n  }\n\n  private static String formatLikers(List<User> likers) {\n    ...\n  }\n}\n")),Object(a.b)("h2",{id:"setup"},"Setup"),Object(a.b)("p",null,"To verify the rendering of the text and the icon."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Create a new test class; ",Object(a.b)("inlineCode",{parentName:"li"},"LikersComponentTest"),"."),Object(a.b)("li",{parentName:"ul"},"Add ",Object(a.b)("inlineCode",{parentName:"li"},"@RunWith(RobolectricTestRunner.class)")," to the top of the test class."),Object(a.b)("li",{parentName:"ul"},"Add a ",Object(a.b)("inlineCode",{parentName:"li"},"LithoViewRule")," JUnit ",Object(a.b)("a",{parentName:"li",href:"https://github.com/junit-team/junit4/wiki/Rules"},Object(a.b)("inlineCode",{parentName:"a"},"@Rule"))," which\nsets up overrides for ",Object(a.b)("a",{parentName:"li",href:"https://developer.android.com/reference/android/R.styleable.html"},"Styleables"),"\nand exposes some useful APIs.")),Object(a.b)("p",null,"The test class should look like the following:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"@RunWith(RobolectricTestRunner.class)\npublic class LikersComponentTest {\n\n  public final @Rule LithoViewRule mLithoViewRule = new LithoViewRule();\n\n}\n")),Object(a.b)("h2",{id:"testing-component-rendering"},"Testing component rendering"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"LithoAssertions")," exposes AssertJ-style APIs to assert what get rendered by a component. These APIs\nwill generally layout, mount and render the component before testing the assertions."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},'@RunWith(RobolectricTestRunner.class)\npublic class LikersComponentTest {\n\n  public final @Rule LithoViewRule mLithoViewRule = new LithoViewRule();\n  @Test\n  public void whenTwoUsersLike_shouldShowBothUserNames() {\n    final ComponentContext c = mLithoViewRule.getContext();\n    final ImmutableList<User> likers = ImmutableList.of(\n      new User("Jane"), new User("Mike")\n    );\n    final LikersComponent component = LikersComponent.create(c)\n        .likers(likers)\n        .build();\n\n    LithoAssertions.assertThat(c , component).hasVisibleText("Jane, Mike");\n  }\n\n  @Test\n  public void whenUsersLike_shouldShowLikeIcon() {\n    final ComponentContext c = mLithoViewRule.getContext();\n    final ImmutableList<User> likers = ImmutableList.of(\n      new User("Jane"), new User("Mike")\n    );\n    final LikersComponent component = LikersComponent.create(c)\n        .likers(likers)\n        .build();\n\n    final Drawable likeIcon = c.getResources().getDrawable(R.drawable.like);\n    LithoAssertions.assertThat(c , component).hasVisibleDrawable(likeIcon);\n  }\n}\n')),Object(a.b)("h2",{id:"additional-assertions"},"Additional assertions"),Object(a.b)("p",null,"There are several more assertions that can be tested using LithoAssertions. To see the entire\nAPIs please checkout its ",Object(a.b)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/testing/assertj/LithoAssertions.html"},"JavaDoc here"),".\nThese APIs test assertions on the view heirarchy created by the mounted Component. So asserting\nthe presence of a Drawable in a Component will traverse the entire view hierarchy rendered by\nthe Component. Following are some of the assertions provided by LithoAssertions:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"LithoAssertions#hasVisibleTextMatching()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"LithoAssertions#doesNotHaveVisibleText()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"LithoAssertions#willRender()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"LithoAssertions#doesNotHaveVisibleDrawable()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"LithoAssertions#hasContentDescription()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"LithoAssertions#willNotRender()"))),Object(a.b)("div",{className:"admonition admonition-info alert alert--info"},Object(a.b)("div",{parentName:"div",className:"admonition-heading"},Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",{parentName:"h5",className:"admonition-icon"},Object(a.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(a.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(a.b)("div",{parentName:"div",className:"admonition-content"},Object(a.b)("p",{parentName:"div"},"When running Litho unit tests, be aware that the native library for Yoga must be loaded\nwhich can pose some challenges depending on your build system of choice. With Gradle and\nRobolectric, for instance, you may run into issues as Robolectric spins up new\n",Object(a.b)("a",{parentName:"p",href:"https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html"},"ClassLoaders"),"\nfor every test suite with a different configuration. The same goes for PowerMock, which\nprepares the ClassLoaders on a per-suite basis and leaves them in a non-reusable state."),Object(a.b)("p",{parentName:"div"},"The JVM has two important limitations that are relevant to this:"),Object(a.b)("ol",{parentName:"div"},Object(a.b)("li",{parentName:"ol"},"A shared library can only ever be loaded once per process."),Object(a.b)("li",{parentName:"ol"},Object(a.b)("inlineCode",{parentName:"li"},"ClassLoader"),"s do not share information about the libraries loaded.")),Object(a.b)("p",{parentName:"div"},"Because of that, using multiple ClassLoaders for test runs is highly problematic\nas every instance will attempt to load Yoga and every but the first will fail with\n",Object(a.b)("inlineCode",{parentName:"p"},"libyoga.so already loaded in another classloader")," exception."),Object(a.b)("p",{parentName:"div"},"The only way to avoid this is by either preventing the use of multiple ClassLoaders\nor forking the process whenever a new ClassLoader is necessary."),Object(a.b)("p",{parentName:"div"},"Gradle allows you to limit the number of test classes a process can execute before\nit is discarded. If you set the number to one, we avoid the ClassLoader reuse:"),Object(a.b)("pre",{parentName:"div"},Object(a.b)("code",{parentName:"pre",className:"language-groovy"},"android {\n    [...]\n\n    testOptions {\n        unitTests.all {\n            forkEvery = 1\n            maxParallelForks = Math.ceil(Runtime.runtime.availableProcessors() * 1.5)\n        }\n    }\n}\n")),Object(a.b)("p",{parentName:"div"},"With Buck, this behavior can be achieved by assigning test targets separate names\nas those will result in a parallel process being spun up. Alternatively, you can\nset the ",Object(a.b)("inlineCode",{parentName:"p"},"fork_mode")," to ",Object(a.b)("inlineCode",{parentName:"p"},"per_test")," as described\n",Object(a.b)("a",{parentName:"p",href:"https://buckbuild.com/rule/java_test.html#fork_mode"},"here"),"."),Object(a.b)("p",{parentName:"div"},"Ultimately, depending on your build system and the existing constraints of your\nproject, you may need to adjust the way in which your test runner utilizes\nClassLoaders. This is, however, not a problem unique to Litho but an unfortunate\nconsequence of mixing native and Java code in Android projects."))))}u.isMDXComponent=!0}}]);