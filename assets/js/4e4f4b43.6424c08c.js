(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),o=n(8),i=(n(0),n(184)),r={id:"first-components",title:"Components and Props"},l={unversionedId:"tutorial/first-components",id:"tutorial/first-components",isDocsHomePage:!1,title:"Components and Props",description:"In this part of the tutorial, you'll learn the basic Litho building blocks, write a simple component,",source:"@site/../docs/tutorial/first-components.md",slug:"/tutorial/first-components",permalink:"/docs/tutorial/first-components",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/tutorial/first-components.md",version:"current",sidebar:"mainSidebar",previous:{title:"Setting up the project",permalink:"/docs/tutorial/project-setup"},next:{title:"Adding State",permalink:"/docs/tutorial/adding-state"}},c=[{value:"Hello World!",id:"hello-world",children:[]},{value:"First Component Spec",id:"first-component-spec",children:[]},{value:"Introducing Layout",id:"introducing-layout",children:[]}],p={toc:c};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this part of the tutorial, you'll learn the basic Litho building blocks, write a simple component,\nextend it to accept ",Object(i.b)("strong",{parentName:"p"},"props")," and get familiar with building layouts with Flexbox in Litho."),Object(i.b)("h2",{id:"hello-world"},"Hello World!"),Object(i.b)("p",null,'To display a "Hello World!" text on the screen with Litho you need to integrate Litho component\nhierarchy into your View hierarchy.'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java",metastring:"file=../../sample/src/main/java/com/facebook/samples/litho/onboarding/HelloWorldActivity.java start=start_example end=end_example",file:"../../sample/src/main/java/com/facebook/samples/litho/onboarding/HelloWorldActivity.java",start:"start_example",end:"end_example"},'@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n\n  ComponentContext c = new ComponentContext(this);\n  setContentView(LithoView.create(this, Text.create(c).text("Hello World!").build()));\n}\n')),Object(i.b)("h4",{id:"key-points"},"Key Points:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"LithoView"),": A hierarchy of Litho components is rendered using a LithoView"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Text.create(c)"),": This is how you create a component (using a generated builder), both built-in\nones and components you define yourself."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},".text('Hello World!')"),": ",Object(i.b)("inlineCode",{parentName:"li"},"text")," is a ",Object(i.b)("strong",{parentName:"li"},"prop")," of the Text component \u2013 an input parameter to\nconfigure the component.")),Object(i.b)("p",null,"Ignore ",Object(i.b)("inlineCode",{parentName:"p"},"ComponentContext")," for now, just know you need one to create a component."),Object(i.b)("h2",{id:"first-component-spec"},"First Component Spec"),Object(i.b)("p",null,"Welcome to your first Litho component spec! Previously you used a built-in ",Object(i.b)("inlineCode",{parentName:"p"},"Text")," component but now\nyou'll define your own. Like Text, your new component can also take ",Object(i.b)("strong",{parentName:"p"},"props"),". Props configure\na component."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java",metastring:"file=../../sample/src/main/java/com/facebook/samples/litho/onboarding/FirstComponentSpec.java start=start end=end",file:"../../sample/src/main/java/com/facebook/samples/litho/onboarding/FirstComponentSpec.java",start:"start",end:"end"},'@LayoutSpec\npublic class FirstComponentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c, @Prop String name) {\n    return Text.create(c).text("Hello " + name + "!").build();\n  }\n}\n')),Object(i.b)("p",null,"To use your component, you can just replace the Text component from above with your component,\nsetting the ",Object(i.b)("inlineCode",{parentName:"p"},"name")," prop:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java",metastring:"file=../../sample/src/main/java/com/facebook/samples/litho/onboarding/FirstComponentSpecActivity.java start=start_example end=end_example",file:"../../sample/src/main/java/com/facebook/samples/litho/onboarding/FirstComponentSpecActivity.java",start:"start_example",end:"end_example"},'setContentView(LithoView.create(this, FirstComponent.create(c).name("Linda").build()));\n')),Object(i.b)("h4",{id:"key-points-1"},"Key Points:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"@LayoutSpec"),": This annotation tells us that the class defines a component. ",Object(i.b)("strong",{parentName:"li"},"The name of your\ncomponent is the name of the spec minus 'Spec'.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"@OnCreateLayout"),": The static method marked with this annotation returns what your component\nshould render. ",Object(i.b)("inlineCode",{parentName:"li"},"@LayoutSpec")," components delegate to other components, combining, configuring, and\nputting them into layouts. ",Object(i.b)("strong",{parentName:"li"},"Composition of components is a key Litho concept!")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"@Prop"),": This defines a ",Object(i.b)("strong",{parentName:"li"},"prop")," for your component. It will automatically be added to your\ncomponent builder and is required for your component to be built.")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Your component class is generated at build time via the annotation processor. To get proper IDE\nautocompletion without having to rebuild, make sure you've installed the ",Object(i.b)("a",{parentName:"p",href:"/docs/devtools/android-studio-plugin"},"Litho Android Studio plugin"),"!"))),Object(i.b)("h2",{id:"introducing-layout"},"Introducing Layout"),Object(i.b)("p",null,"Enough of HelloWorlds \u2013 let's get to building our Instagram app!"),Object(i.b)("p",null,"You'll start with creating a component for an Instagram post and that requires layouting 2 images\nand a text in a particular way. Layouts in Litho are defined via the Flexbox API. You can read more\nabout different layouting options in ",Object(i.b)("a",{parentName:"p",href:"docs/mainconcepts/uicomposition/flexbox-yoga"},"Layout with Flexbox"),"\ndoc, but for now it's enough to know that the main Flexbox primitives are ",Object(i.b)("strong",{parentName:"p"},"Column")," and ",Object(i.b)("strong",{parentName:"p"},"Row"),",\nand they are used to arrange children vertically and horizontally, respectively."),Object(i.b)("p",null,"With their help a ",Object(i.b)("inlineCode",{parentName:"p"},"Post")," component that will render the UI of an Instagram post will look like that:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java",metastring:"file=../../sample/src/main/java/com/facebook/samples/litho/onboarding/PostSpec.java start=start_example end=end_example",file:"../../sample/src/main/java/com/facebook/samples/litho/onboarding/PostSpec.java",start:"start_example",end:"end_example"},"@LayoutSpec\npublic class PostSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c, @Prop String username, @Prop int avatarRes, @Prop int imageRes) {\n    return Column.create(c)\n        .child(\n            Row.create(c)\n                .child(Image.create(c).drawableRes(avatarRes))\n                .child(Text.create(c).text(username).textStyle(Typeface.BOLD)))\n        .child(\n            Image.create(c)\n                .drawableRes(imageRes)\n                .scaleType(ImageView.ScaleType.CENTER_CROP)\n                .aspectRatio(1))\n        .build();\n  }\n}\n")),Object(i.b)("p",null,"Though hierarchically components are placed correctly, this doesn't look nice, so, as a final touch\nlet's apply some flexbox styles:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java",metastring:"file=../../sample/src/main/java/com/facebook/samples/litho/onboarding/PostStyledSpec.java start=start_example end=end_example",file:"../../sample/src/main/java/com/facebook/samples/litho/onboarding/PostStyledSpec.java",start:"start_example",end:"end_example"},"@OnCreateLayout\nstatic Component onCreateLayout(\n    ComponentContext c, @Prop String username, @Prop int avatarRes, @Prop int imageRes) {\n  return Column.create(c)\n      .child(\n          Row.create(c)\n              .paddingDip(YogaEdge.ALL, 8)\n              .alignItems(YogaAlign.CENTER)\n              .child(\n                  Image.create(c)\n                      .drawableRes(avatarRes)\n                      .widthDip(36)\n                      .heightDip(36)\n                      .marginDip(YogaEdge.START, 4)\n                      .marginDip(YogaEdge.END, 8))\n              .child(Text.create(c).text(username).textStyle(Typeface.BOLD)))\n      .child(\n          Image.create(c)\n              .drawableRes(imageRes)\n              .scaleType(ImageView.ScaleType.CENTER_CROP)\n              .aspectRatio(1))\n      .build();\n}\n")),Object(i.b)("h4",{id:"key-points-2"},"Key Points:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Column")," and ",Object(i.b)("inlineCode",{parentName:"li"},"Row"),": The key container types in Litho. They stack children vertically and\nhorizontally, respectively."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"paddingDip"),": This prop sets padding in Android dp units. ",Object(i.b)("inlineCode",{parentName:"li"},"padding")," along with ",Object(i.b)("inlineCode",{parentName:"li"},"margin"),", ",Object(i.b)("inlineCode",{parentName:"li"},"width"),"\nand ",Object(i.b)("inlineCode",{parentName:"li"},"height")," are some of many props where you will find variants like ",Object(i.b)("inlineCode",{parentName:"li"},"paddingRes"),", ",Object(i.b)("inlineCode",{parentName:"li"},"paddingPx"),",\nand ",Object(i.b)("inlineCode",{parentName:"li"},"paddingAttr")," that allow you to define it in different ways."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Image"),": Image is another built-in component that can render a drawable, and ",Object(i.b)("inlineCode",{parentName:"li"},"drawableRes")," is\nanother prop like padding that can accept a drawable in different ways.")))}s.isMDXComponent=!0},184:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),b=a,u=m["".concat(r,".").concat(b)]||m[b]||d[b]||i;return n?o.a.createElement(u,l(l({ref:t},p),{},{components:n})):o.a.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);